pipeline {
  agent any

  stages {

      stage('install') {
        steps {
          git branch: 'master', url: 'https://github.com/jvalenciaduque/ColorLib.git'
        }
      }

    stage('SonarQube analysis') {
        steps {
            withSonarQubeEnv(installationName: 'Sonar 5.0.1.3006', credentialsId: 'jenkins-sonar') {
              bat """
              ./gradlew sonarqube \
                    -Dsonar.projectKey=${"Sonar 9.8.0.63668"} \
                    -Dsonar.host.url=${env.SONAR_HOST_URL} \
                    -Dsonar.login=${env.SONAR_AUTH_TOKEN} \
                    -Dsonar.projectName=${"PipelineColorLib"} \
                    -Dsonar.projectVersion=${BUILD_NUMBER}"
                """
            }
          }
        } //scan

    stage('Build') {
      steps {
        withGradle {
           bat './gradlew clean build --stacktrace -i'
        }
      }
    } // Build

    stage('Publish') {
      steps {
        withCredentials([usernamePassword(
        credentialsId: 'github-publish-maven',
        passwordVariable: 'MVN_PASSWORD',
        usernameVariable: 'MVN_USERNAME')]) {

          withGradle {
            bat """
              ./gradlew -i --stacktrace publish \
                  -PMVN_USERNAME=${MVN_USERNAME} \
                  -PMVN_PASSWORD=${MVN_PASSWORD} \
                  -PMVN_VERSION=1.${BUILD_NUMBER}
            """
          }
        }
      }
    } // Publish

        stage('Post') {
          steps {
            script {
              jacoco()
              junit 'lib/build/test-results/test/*.xml'
              def pmd = scanForIssues tool: [$class: 'Pmd'], pattern: 'lib/build/reports/pmd/*.xml'
              publishIssues issues: [pmd]
            }
          }
        } // Post
  }
}